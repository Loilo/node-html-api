var htmlApi=function(){"use strict";function mitt(e){return e=e||Object.create(null),{on:function(t,i){(e[t]||(e[t]=[])).push(i)},off:function(t,i){e[t]&&e[t].splice(e[t].indexOf(i)>>>0,1)},emit:function(t,i){(e[t]||[]).map(function(e){e(i)}),(e["*"]||[]).map(function(e){e(t,i)})}}}function isPlainObject(e){return"object"==typeof e&&null==e.prototype}function isCustomTypeConstraint(e){return isPlainObject(e)&&"function"==typeof e.validate&&"function"==typeof e.serialize&&"function"==typeof e.unserialize}function isValidSingleTypeConstraint(e){return Array.from(presetTypes.keys()).includes(e)||isCustomTypeConstraint(e)}function isValidTypeConstraint(e){return Array.isArray(e)?e.length&&e.every(isValidSingleTypeConstraint):isValidSingleTypeConstraint(e)}function createMultiConstraintDetector(e){Array.isArray(e)||(e=[e]);const t=Array.from(presetTypes.keys());return e=e.slice(0).sort((e,i)=>{const n=t.indexOf(e),r=t.indexOf(i);return n===r?0:-1===n?-1:-1===r?1:n<r?-1:1}).map(e=>presetTypes.has(e)?presetTypes.get(e):e),(t,i)=>e.find(e=>{try{let n=t;return i&&(n=e.unserialize(t)),e.validate(n)}catch(e){return!1}})}function isUndef(e){return void 0===e}function validateOptionDefinition(e){if(isValidTypeConstraint(e))return!0;if(!isPlainObject(e))throw new Error("Definition must be a type constraint or an object.");{const t=createMultiConstraintDetector(e.type);if(e.required&&!isUndef(e.default))throw new Error("Option can either be required or have a default value, not both");if(!e.required&&isUndef(e.default)&&!(null===e.type||Array.isArray(e.type)&&e.type.includes(null)))throw new Error("An option must either be required, have a default value or include a `null` type");if(!isUndef(e.default)&&!t(e.default))throw new Error("Default value is invalid")}}function validateOptionsDefinition(e){if(!isPlainObject(e))throw new Error("Options definition must be a plain object");for(const[t,i]of Object.entries(e))try{validateOptionDefinition(i)}catch(e){throw new Error(`Option definition for option "${t}" failed: ${e.message}`)}}function getTypeConstraints(e){return isValidTypeConstraint(e)?Array.isArray(e)?e:isCustomTypeConstraint(e)?[e]:[presetTypes.get(e)]:isValidTypeConstraint(e.type)?Array.isArray(e.type)?e.type:isCustomTypeConstraint(e.type)?[e.type]:[presetTypes.get(e.type)]:void 0}function validateOptionValue(e,t,i=!1){const n=getTypeConstraints(t);let r;if(void 0!==n){const t=createMultiConstraintDetector(n);if(i){const i=t(e,!0);try{r=i.unserialize(e)}catch(t){throw new Error(`Invalid serialized option value "${e}"`)}if(isUndef(i)||!i.validate(r))throw new Error(`Invalid serialized option value "${e}"`)}else{const i=t(e,!1);if(isUndef(i)||!i.validate(e))throw new Error(`Invalid option value "${e}"`);r=i.serialize(e)}}else r=e;return r}function getInitialValues(e,t,i){const n=Object.create(null);for(const[r,a]of Object.entries(t)){const t=e.dataset[r];if(null!=t)try{n[r]=validateOptionValue(t,a,!0)}catch(e){throw new Error(`Error setting initial option "${r}": ${e.message}`)}else a.required?window.requestAnimationFrame(()=>{i.emit("error",new Error(`Missing required option "${r}"`))}):void 0!==a.default?n[r]=a.default:n[r]=null}return n}function kebab(e){return e.replace(/([A-Z])/g,(e,t)=>"-"+t.toLowerCase())}function camel(e){return e.replace(/-([a-z])/g,(e,t)=>t.toUpperCase())}function createOptionsAttrList(e){return Object.keys(e).map(e=>`data-${kebab(e)}`)}function createOptionsDefInterface(e,t,i,n){const r=Object.create(null);for(const[a,o]of Object.entries(e))Object.defineProperty(r,a,{get:()=>i[a],set(e){try{const i=validateOptionValue(e,o,!1);"string"==typeof i?t.dataset[a]=e:delete t.dataset[a]}catch(e){n.emit("error",new Error(`Error setting option "${a}": ${e.message}`))}}});return r}function observeElement(e,t,i){const n=new window.MutationObserver(e=>{for(const n of e)"attributes"===n.type&&t.includes(n.attributeName)&&i(n.attributeName.slice(5),n.oldValue)});return n.observe(e,{attributes:!0}),n}function createMutationHandler(e,t,i,n){return(r,a)=>{const o=camel(r),s=t[o],l=e.dataset[o];if(l!==a)try{const e=validateOptionValue(l,s,!0),t=i[o];i[o]=e,n.emit("change",{option:o,oldValue:t,value:e})}catch(e){n.emit("error",new Error(`Error setting option "${o}" via HTML: ${e.message}`))}}}function createElementObserver(e,t,i,n){return observeElement(e,createOptionsAttrList(t),createMutationHandler(e,t,i,n))}function htmlApi(e,t){if(!(e instanceof window.Element))throw new Error("No valid Element given");validateOptionsDefinition(t);const i=mitt(),n=getInitialValues(e,t,i);let r=createElementObserver(e,t,n,i);const a=Object.create(null);return i.on("change",({option:e,value:t,oldValue:i})=>{"function"==typeof a[e]&&a[e](t,i)}),{options:createOptionsDefInterface(t,e,n,i),onChange:a,on(e,t){return i.on(e,t),this},off(e,t){return i.off(e,t),this},merge(a){validateOptionsDefinition(a),Object.assign(t,a);const o=getInitialValues(e,a,i);Object.assign(n,o),this.options=createOptionsDefInterface(t,e,n,i),r.disconnect(),r=createElementObserver(e,t,n,i)},destroy(){r.disconnect()}}}const presetTypes=new Map([[null,{validate:e=>null==e,serialize:e=>"null",unserialize:e=>JSON.parse(e)}],[Boolean,{validate:e=>"boolean"==typeof e,serialize:e=>e?"":void 0,unserialize:e=>{if(void 0===e||"false"===e)return!1;if(""===e||"true"===e)return!0;throw new Error("Invalidly serialized Boolean")}}],[Number,{validate:e=>"number"==typeof e&&!isNaN(e),serialize:e=>JSON.stringify(e),unserialize:e=>+e}],[Array,{validate:e=>Array.isArray(e),serialize:e=>JSON.stringify(e),unserialize:e=>JSON.parse(e)}],[Object,{validate:e=>"object"==typeof e&&!Array.isArray(e),serialize:e=>JSON.stringify(e),unserialize:e=>JSON.parse(e)}],[Function,{validate:e=>"function"==typeof e,serialize:e=>String(e),unserialize:value=>eval(`(${value})`)}],[String,{validate:e=>"string"==typeof e,serialize:e=>e,unserialize:e=>e}]]);return htmlApi}();
