var htmlApi=function(){"use strict";function mitt(e){return e=e||Object.create(null),{on:function(t,n){(e[t]||(e[t]=[])).push(n)},off:function(t,n){e[t]&&e[t].splice(e[t].indexOf(n)>>>0,1)},emit:function(t,n){(e[t]||[]).map(function(e){e(n)}),(e["*"]||[]).map(function(e){e(t,n)})}}}function entries(e){return Object.keys(e).map(t=>[t,e[t]])}function has(e,t){return e.includes?e.includes(t):-1!==e.indexOf(t)}function find(e,t){if(e.find)return e.find(t);for(let n=0;n<e.length;n++)if(t(e[n],n,e))return e[n]}function arrayFrom(e){if(Array.from)return Array.from(e);if(Array.isArray(e))return e.slice(0);const t=[];for(let n=0;n<e.length;n++)t.push(e[n]);return t}function isPlainObject(e){return"object"==typeof e&&null==e.prototype}function isCustomTypeConstraint(e){return isPlainObject(e)&&"function"==typeof e.validate&&"function"==typeof e.serialize&&"function"==typeof e.unserialize}function isValidSingleTypeConstraint(e){return has(arrayFrom(presetTypes.keys()),e)||isCustomTypeConstraint(e)}function isValidTypeConstraint(e){return Array.isArray(e)?e.length&&e.every(isValidSingleTypeConstraint):isValidSingleTypeConstraint(e)}function createMultiConstraintDetector(e){Array.isArray(e)||(e=[e]);const t=arrayFrom(presetTypes.keys());return e=e.slice(0).sort((e,n)=>{const i=t.indexOf(e),r=t.indexOf(n);return i===r?0:-1===i?-1:-1===r?1:i<r?-1:1}).map(e=>presetTypes.has(e)?presetTypes.get(e):e),(t,n)=>find(e,e=>{try{let i=t;return n&&(i=e.unserialize(t)),e.validate(i)}catch(e){return!1}})}function isUndef(e){return void 0===e}function validateOptionDefinition(e){if(isValidTypeConstraint(e))return!0;if(!isPlainObject(e))throw new Error("Definition must be a type constraint or an object.");{if(!isValidTypeConstraint(e.type))throw Error("Definition must have a valid type constraint");const t=createMultiConstraintDetector(e.type);if(e.required&&!isUndef(e.default))throw new Error("Option can either be required or have a default value, not both");if(e.required||!isUndef(e.default)||null===e.type||Array.isArray(e.type)&&has(e.type,null)||(Array.isArray(e.type)?e.type.push(null):e.type=[e.type,null]),!isUndef(e.default)&&!t(e.default))throw new Error("Default value is invalid")}}function validateOptionsDefinition(e){if(!isPlainObject(e))throw new Error("Options definition must be a plain object");for(const[t,n]of entries(e))try{validateOptionDefinition(n),isValidTypeConstraint(n)&&(Array.isArray(n)?has(n,null)||n.push(null):null!==n&&(e[t]=[n,null]))}catch(e){throw new Error(`Option definition for option "${t}" failed: ${e.message}`)}}function getTypeConstraints(e){return isValidTypeConstraint(e)?Array.isArray(e)?e:isCustomTypeConstraint(e)?[e]:[presetTypes.get(e)]:Array.isArray(e.type)?e.type:isCustomTypeConstraint(e.type)?[e.type]:[presetTypes.get(e.type)]}function validateOptionValue(e,t,n=!1){const i=getTypeConstraints(t);if(null==e&&has(i,null))return n?null:"null";let r;const a=createMultiConstraintDetector(i);if(n){const t=a(e,!0);try{r=t.unserialize(e)}catch(t){throw new Error(`Invalid serialized option value "${e}"`)}if(!t.validate(r))throw new Error(`Invalid serialized option value "${e}"`)}else{const t=a(e,!1);if(isUndef(t)||!t.validate(e))throw new Error(`Invalid option value "${e}"`);r=t.serialize(e)}return r}function getInitialValues(e,t,n){const i=Object.create(null);for(const[r,a]of entries(t)){const t=e.dataset[r];if(null!=t)try{i[r]=validateOptionValue(t,a,!0)}catch(e){throw new Error(`Error setting initial option "${r}": ${e.message}`)}else a.required?window.requestAnimationFrame(()=>{n.emit("error",new Error(`Missing required option "${r}"`))}):void 0!==a.default?i[r]=a.default:i[r]=null}return i}function kebab(e){return e.replace(/([A-Z])/g,(e,t)=>"-"+t.toLowerCase())}function camel(e){return e.replace(/-([a-z])/g,(e,t)=>t.toUpperCase())}function createOptionsAttrList(e){return Object.keys(e).map(e=>`data-${kebab(e)}`)}function createOptionsDefInterface(e,t,n,i){const r=Object.create(null);for(const[a,o]of entries(e))Object.defineProperty(r,a,{get:()=>n[a],set(e){try{const n=validateOptionValue(e,o,!1);"string"==typeof n?t.dataset[a]=n:delete t.dataset[a]}catch(e){i.emit("error",new Error(`Error setting option "${a}": ${e.message}`))}}});return r}function observeElement(e,t,n){const i=new window.MutationObserver(e=>{for(const t of e)"attributes"===t.type&&n(t.attributeName.slice(5),t.oldValue)});return i.observe(e,{attributes:!0,attributeFilter:t}),i}function createMutationHandler(e,t,n,i){return(r,a)=>{const o=camel(r),s=t[o],l=e.dataset[o];if(l!==a)try{const e=validateOptionValue(l,s,!0),t=n[o];n[o]=e,i.emit("change",{option:o,oldValue:t,value:e})}catch(e){i.emit("error",new Error(`Error setting option "${o}" via HTML: ${e.message}`))}}}function createElementObserver(e,t,n,i){return observeElement(e,createOptionsAttrList(t),createMutationHandler(e,t,n,i))}function htmlApi(e,t){if(!(e instanceof window.Element))throw new Error("No valid Element given");validateOptionsDefinition(t);const n=mitt(),i=getInitialValues(e,t,n);let r=createElementObserver(e,t,i,n);const a=Object.create(null);return n.on("change",({option:e,value:t,oldValue:n})=>{"function"==typeof a[e]&&a[e](t,n)}),{options:createOptionsDefInterface(t,e,i,n),onChange:a,on(e,t){return n.on(e,t),this},off(e,t){return n.off(e,t),this},merge(a){validateOptionsDefinition(a),Object.assign(t,a);const o=getInitialValues(e,a,n);return Object.assign(i,o),this.options=createOptionsDefInterface(t,e,i,n),r.disconnect(),r=createElementObserver(e,t,i,n),this},destroy(){r.disconnect()}}}const presetTypes=new Map([[null,{validate:e=>null==e,serialize:e=>"null",unserialize:e=>JSON.parse(e)}],[Boolean,{validate:e=>"boolean"==typeof e,serialize:e=>e?"":void 0,unserialize:e=>{if(void 0===e||"false"===e)return!1;if(""===e||"true"===e)return!0;throw new Error("Invalidly serialized Boolean")}}],[Number,{validate:e=>"number"==typeof e&&!isNaN(e),serialize:e=>String(e),unserialize:e=>+e}],[Array,{validate:e=>Array.isArray(e),serialize:e=>JSON.stringify(e),unserialize:e=>JSON.parse(e)}],[Object,{validate:e=>"object"==typeof e&&!Array.isArray(e),serialize:e=>JSON.stringify(e),unserialize:e=>JSON.parse(e)}],[Function,{validate:e=>"function"==typeof e,serialize:e=>String(e),unserialize:value=>eval(`(${value})`)}],[String,{validate:e=>"string"==typeof e,serialize:e=>e,unserialize:e=>e}]]);htmlApi.Enum=((...e)=>({validate:t=>"string"==typeof t&&has(e,t),serialize:e=>e,unserialize:e=>e}));const numGen=(e=-1/0,t=1/0,n=!0)=>({validate:i=>(n||Number.isInteger?Number.isInteger(i):"number"==typeof i&&isFinite(i)&&Math.floor(i)===i)&&i>=e&&i<=t,serialize:e=>String(e),unserialize:e=>+e});return htmlApi.Integer=Object.assign(numGen(-1/0,1/0,!1),{min:e=>Object.assign(numGen(e,1/0,!1),{max:t=>numGen(e,t,!1)}),max:e=>numGen(-1/0,e,!1)}),htmlApi.Float=Object.assign(numGen(-1/0,1/0),{min:e=>Object.assign(numGen(e,1/0),{max:t=>numGen(e,t)}),max:e=>numGen(-1/0,e)}),htmlApi}();
